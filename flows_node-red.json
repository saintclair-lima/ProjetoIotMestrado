[
    {
        "id": "3da32864abf7bffb",
        "type": "tab",
        "label": "API_Temperatura",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec9c7dece580fa94",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Reg Temperatura",
        "url": "registrar-temperatura",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "68b17dc888909c26"
            ]
        ]
    },
    {
        "id": "a73678c289093518",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "Resposta",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "68b17dc888909c26",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "processar_input",
        "func": "const timestamp = new Date().getTime();\n\nlet query = `INSERT INTO LeituraTemperatura (DispositivoId, Valor, Escala, Timestamp)\nVALUES\n(${msg.req.query.idDispositivo},\n ${msg.req.query.valor},\n \"${msg.req.query.escala}\",\n \"${timestamp}\")`;\n\nmsg.topic = query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "700022a7d16523ff"
            ]
        ]
    },
    {
        "id": "21579e1192fb0010",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "Consulta",
        "func": "msg.topic = \"SELECT * FROM LeituraTemperatura\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "aa3bf6a126930cea"
            ]
        ]
    },
    {
        "id": "aa3bf6a126930cea",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Consulta",
        "x": 560,
        "y": 220,
        "wires": [
            [
                "0e22a25697fcc159",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "700022a7d16523ff",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert Temperatura",
        "x": 590,
        "y": 60,
        "wires": [
            [
                "a73678c289093518",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "020dd67cb0dbf0b4",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Post: Reg Temperatura",
        "url": "registrar-temperatura",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "02a6cb7bc148a354"
            ]
        ]
    },
    {
        "id": "29869fc9863668dc",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "Resposta",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "02a6cb7bc148a354",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "processar_input",
        "func": "\n\nconst timestamp = new Date().getTime();\n\nlet query = `INSERT INTO LeituraTemperatura (DispositivoId, Valor, Escala, Timestamp)\nVALUES\n(${msg.payload.idDispositivo},\n ${msg.payload.valor},\n \"${msg.payload.escala}\",\n \"${timestamp}\")`;\nmsg.topic = query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "7501fb8effc45e0c"
            ]
        ]
    },
    {
        "id": "7501fb8effc45e0c",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert Temperatura",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "29869fc9863668dc",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "0e22a25697fcc159",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "Resposta",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "a0d6d4b2673c00a4",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Leituras Todas",
        "url": "recuperar-leituras",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "21579e1192fb0010"
            ]
        ]
    },
    {
        "id": "79caed3a189a0d65",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Display Temperatura",
        "url": "display",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "413e4fcd12d9715f"
            ]
        ]
    },
    {
        "id": "428e7b4a152bf8dc",
        "type": "template",
        "z": "3da32864abf7bffb",
        "name": "display.html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n  <html>\n    <head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <style>\n        body {\n          background-color:#2d2d2d;\n          width: 100%;\n        }\n\n        #display {\n          font: small-caps lighter 20px/150% \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n          text-align:left;\n          margin: 40px auto;\n          color:#fff;\n          border-left: 3px solid #ed1f24;\n          padding: 20px;\n        }\n\n        .sidenav {\n          height: 100%;\n          width: 0;\n          position: fixed;\n          z-index: 1;\n          top: 0;\n          left: 0;\n          background-color: #111;\n          overflow-x: hidden;\n          transition: 0.5s;\n          padding-top: 60px;\n        }\n\n        .sidenav a {\n          font: small-caps lighter 20px/150% \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n          padding: 8px 8px 8px 32px;\n          text-decoration: none;\n          font-size: 25px;\n          color: #818181;\n          display: block;\n          transition: 0.3s;\n        }\n\n        .sidenav a:hover {\n          color: #f1f1f1;\n        }\n\n        .sidenav .closebtn {\n          position: absolute;\n          top: 0;\n          right: 25px;\n          font-size: 36px;\n          margin-left: 50px;\n        }\n\n        @media screen and (max-height: 450px) {\n          .sidenav {padding-top: 15px;}\n          .sidenav a {font-size: 18px;}\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"sideNav\" class=\"sidenav\">\n        <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\">&times;</a>\n      </div>\n      <span style=\"font-size:75px;cursor:pointer\" onclick=\"openNav()\">&#9776;</span>\n\n      <div id=\"display\">\n        <h2 id=\"dispositivo\"></h2>\n        <h1 id=\"temperatura\">Carregando...</h1>\n        <h2 id=\"leitura\">⌛</h2>\n      </div>\n\n      <!-- Precisa ser abaixo, de forma que os elementos a serem alterados já estejam\n          disponíveis na hora da execução -->\n      <script>\n        let ID_DISPOSITIVO_;\n        function openNav() {\n          document.getElementById(\"sideNav\").style.width = \"100%\";\n        }\n\n        function closeNav() {\n          document.getElementById(\"sideNav\").style.width = \"0\";\n        }\n        const getPost = async () => {\n          const response = await fetch('http://{{{payload.internalIPv4}}}:1880/recuperar-dispositivos');\n          //const response = await fetch('http://{{{payload.internalIPv4}}}:1880/recuperar-leituras');\n          const dispositivos = await response.json();\n          return dispositivos;\n        };\n      \n        const sideNav = document.getElementById(\"sideNav\");\n\n        const displayOption = async () => {\n          const dispositivos = await getPost();\n          ID_DISPOSITIVO_ = dispositivos[0].DispositivoId;\n          updateText(ID_DISPOSITIVO_);\n          dispositivos.forEach(dispositivo => {\n              const novoLink = document.createElement(\"a\");\n              novoLink.href = dispositivo.DispositivoId;\n              novoLink.text = \"Dispositivo \" + dispositivo.DispositivoId;\n              novoLink.addEventListener(\"click\", function(event) {\n                event.preventDefault();\n                alterarDispositivo(dispositivo.DispositivoId);\n                closeNav();\n              });\n              sideNav.appendChild(novoLink);\n          });\n        };\n\n        const alterarDispositivo = (idDispositivo) => {\n          updateText(idDispositivo);\n        }\n\n        document.addEventListener(\"DOMContentLoaded\", function() {\n          displayOption();\n        });\n\n        async function updateText(idDispositivo) {\n          // Faz solicitação ao endopoint da API via AJAX\n          const xhr = new XMLHttpRequest();\n          xhr.open('GET', `http://{{{payload.internalIPv4}}}:1880/recuperar-leituras-dispositivo?idDispositivo=${idDispositivo}`, true);\n          //xhr.open('GET', `http://192.168.164.216:1880/recuperar-leituras-dispositivo?idDispositivo=${idDispositivo}`, true);\n\n\n          // Atualiza os elementos de exibição\n          xhr.onreadystatechange = function () {\n            if ((xhr.readyState === 4 && xhr.status === 200) || xhr.status === 304) { // AFAZER: Verificar se realmente precisa considerar 304 (sem alterações)\n            const dados = JSON.parse(xhr.responseText);\n            const item = dados[dados.length - 1]\n            console.log(item);\n            const dispositivo = document.getElementById('dispositivo');\n            dispositivo.textContent = `Dispositivo: ${item.DispositivoId}`;\n            const temperatura = document.getElementById('temperatura');\n            temperatura.textContent = `Temperatura: ${item.Valor} °${item.Escala}`.replace('.',',');\n            const subtitulo =  document.getElementById('leitura');\n            subtitulo.textContent = `Última Leitura: ${new Date(parseInt(item.Timestamp)).toLocaleString()}`\n          }\n        };\n        xhr.send();\n      }\n    </script>\n  </body>\n</html> ",
        "output": "str",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "f4ec3abc99938966"
            ]
        ]
    },
    {
        "id": "f4ec3abc99938966",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 400,
        "wires": []
    },
    {
        "id": "c09ac2cb2c3d07f1",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Relatório Temperatura",
        "url": "relatorio",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "13d9e3f42849f2b7"
            ]
        ]
    },
    {
        "id": "cb296dd91e144ca1",
        "type": "template",
        "z": "3da32864abf7bffb",
        "name": "relatorio.html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Relatório - Temperaturas Lidas</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\"></script>\n    <style>\n        body {\n            font: small-caps lighter 30px/150% \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n            text-align:left;\n            margin: 40px auto;\n            width: 100%;\n            color:#fff;\n            border-left: 3px solid #ed1f24;\n            padding: 20px;\n            background-color:#2d2d2d;\n        }\n\n        #grafico {\n            background-color:#ffffff;\n            width: 100%;\n        }\n\n        #canvas {\n            background-color:#ffffff;\n            width: 100%;\n        }\n\n        #tabelaTemperaturas {\n            border-collapse: collapse;\n            width: 100%;\n        }\n\n        #tabelaTemperaturas th, #tabelaTemperaturas td {\n            border: 1px solid #fff;\n            padding: 8px;\n        }\n\n        #tabelaTemperaturas th {\n            background-color: #076b0c;\n            text-align: left;\n        }\n\n        #tabelaTemperaturas tbody tr:nth-child(even) {\n            background-color: #555;\n        }\n\n        #tabelaTemperaturas tbody tr:nth-child(odd) {\n            background-color: #777;\n        }\n    </style>\n\n    <script>\n        function updateTable() {\n            // Make an AJAX request to your API endpoint\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'http://{{ payload.internalIPv4 }}:1880/recuperar-leituras', true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    const data = JSON.parse(xhr.responseText);\n                    let datasetLeituras = gerarDatasetLeituras(data);\n                    gerarGrafico(datasetLeituras);\n\n                    // Update table cells with data\n                    const tableBody = document.querySelector('#tabelaTemperaturas tbody');\n                    tableBody.innerHTML = ''; // Clear existing rows\n                    data.forEach(item => {\n                        const row = document.createElement('tr');\n                        row.innerHTML = `\n                            <td>${item.DispositivoId}</td>\n                            <td>${item.Valor + \" °\" + item.Escala}</td>\n                            <td>${new Date(parseInt(item.Timestamp)).toLocaleString() }</td>\n                        `;\n                        tableBody.appendChild(row);\n                    });\n                }\n            };\n            xhr.send();\n        }\n\n        function gerarDatasetLeituras(leituras){\n          const cores = [\"Tomato\", \"Orange\", \"DodgerBlue\", \"MediumSeaGreen\", \"Gray\", \"SlateBlue\", \"Violet\", \"LightGray\"].reverse();\n          const dados = leituras.reduce((acc, obj) => {\n            const dispositivoId = obj.DispositivoId;\n            const valor = obj.Valor;\n\n            // Check if the device id already exists in the accumulator\n            const existingItem = acc.find(item => item.label === dispositivoId);\n            if (existingItem) {\n                existingItem.data.push(valor);\n            } else {\n                // If not, create a new entry\n                acc.push({ label: dispositivoId, data: [valor], borderColor: cores.pop(), fill: false });\n            }\n            return acc;\n          }, []);\n        \n          tamanhos = []\n          for(let item of dados){\n            tamanhos.push(item.data.length);\n          }\n\n          let labels = Array.from({ length: Math.max(...tamanhos) }, (_, index) => index + 1);\n\n          return {\"labels\": labels, \"dados\":dados};\n        }\n\n        function gerarGrafico(informacao){\n          new Chart(\"grafico\", {\n            type: \"line\",\n            data: {\n              labels: informacao.labels,\n              datasets: informacao.dados,\n            },\n            options: {\n              legend: {display: true}\n            }\n          });\n        }\n\n        // Call the function initially and set the interval\n        updateTable();\n        setInterval(updateTable, 15000); // 15 seconds\n    </script>\n</head>\n<body>\n    <div id=\"canvas\">\n        <canvas id=\"grafico\" style=\"width:100%;\"></canvas>\n    </div>\n    <table id=\"tabelaTemperaturas\">\n        <thead>\n            <tr>\n                <th>ID Dispositivo</th>\n                <th>Temperatura</th>\n                <th>Leitura</th>\n            </tr>\n        </thead>\n        <tbody>\n        </tbody>\n    </table>\n</body>\n</html>",
        "output": "str",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "3e28730fd4df0607"
            ]
        ]
    },
    {
        "id": "3e28730fd4df0607",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "380f9f7d3dd9c667",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Criar Tabela",
        "url": "criar-tabela",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "2902e9e37156e2e8"
            ]
        ]
    },
    {
        "id": "cae8e7fd21d98788",
        "type": "template",
        "z": "3da32864abf7bffb",
        "name": "relatorio.html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Display - Temperatura Atual</title>\n    <style>\n        body {\n            background-color:#2d2d2d;\n            width: 100%;\n        }\n\n        #display {\n            font: small-caps lighter 30px/150% \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n            text-align:left;\n            margin: 40px auto;\n            color:#fff;\n            border-left: 3px solid #ed1f24;\n            padding: 20px;\n        }\n    </style>\n\n</head>\n<body>\n    <div id=\"display\">\n        <h1>Tabela criada</h1>\n    </div>\n</body>\n</html>",
        "output": "str",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "3820d1075cafc5be"
            ]
        ]
    },
    {
        "id": "3820d1075cafc5be",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "dedfc3d75fff5ead",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "CREATE TABLE",
        "x": 460,
        "y": 540,
        "wires": [
            [
                "cae8e7fd21d98788",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "2902e9e37156e2e8",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "Consulta",
        "func": "msg.topic = \"CREATE TABLE LeituraTemperatura (DispositivoId INT, Valor NUMERIC, Escala CHAR, Timestamp VARCHAR);\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "dedfc3d75fff5ead"
            ]
        ]
    },
    {
        "id": "413e4fcd12d9715f",
        "type": "ip",
        "z": "3da32864abf7bffb",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": false,
        "publicIPv4": true,
        "publicIPv6": false,
        "x": 330,
        "y": 400,
        "wires": [
            [
                "428e7b4a152bf8dc"
            ]
        ]
    },
    {
        "id": "13d9e3f42849f2b7",
        "type": "ip",
        "z": "3da32864abf7bffb",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": false,
        "publicIPv4": true,
        "publicIPv6": false,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "cb296dd91e144ca1"
            ]
        ]
    },
    {
        "id": "74ec45c6b1c70f2c",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "Consulta",
        "func": "msg.topic = `SELECT * FROM LeituraTemperatura WHERE DispositivoId = ${msg.req.query.idDispositivo}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "e2b420634cc09abf"
            ]
        ]
    },
    {
        "id": "e2b420634cc09abf",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Consulta",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "07bfe5234255103a",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "07bfe5234255103a",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "Resposta",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 280,
        "wires": []
    },
    {
        "id": "181b5facd9ccfe10",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Leituras Dispositivo",
        "url": "recuperar-leituras-dispositivo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "74ec45c6b1c70f2c"
            ]
        ]
    },
    {
        "id": "6e6519091a627862",
        "type": "function",
        "z": "3da32864abf7bffb",
        "name": "Consulta",
        "func": "msg.topic = `SELECT DISTINCT(DispositivoId) FROM LeituraTemperatura`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "91bebe74562b1bee"
            ]
        ]
    },
    {
        "id": "91bebe74562b1bee",
        "type": "sqlite",
        "z": "3da32864abf7bffb",
        "mydb": "3ba85b566413b6e9",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Consulta",
        "x": 560,
        "y": 340,
        "wires": [
            [
                "6ccbb7cf33aaa674",
                "cca62f5cba68373b"
            ]
        ]
    },
    {
        "id": "6ccbb7cf33aaa674",
        "type": "http response",
        "z": "3da32864abf7bffb",
        "name": "Resposta",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "68c4b2c4afcaced9",
        "type": "http in",
        "z": "3da32864abf7bffb",
        "name": "Get Lista Dispositivos",
        "url": "recuperar-dispositivos",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "6e6519091a627862"
            ]
        ]
    },
    {
        "id": "cca62f5cba68373b",
        "type": "debug",
        "z": "3da32864abf7bffb",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "3ba85b566413b6e9",
        "type": "sqlitedb",
        "db": "/home/pi/IOT_Database/DBTemperatura",
        "mode": "RWC"
    }
]
